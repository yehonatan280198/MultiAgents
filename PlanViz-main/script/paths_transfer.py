# -*- coding: UTF-8 -*-
""" Transfer paths generated by Jiaoyang's code to .json file for PlanViz """

import argparse
from typing import List
import json


class PathsTransfer:
    """Transfer the paths from Jiaoyang's codebase to .json file for PlanViz
    """
    def __init__(self, scen_file, path_file) -> None:
        self.scen_file = scen_file
        self.path_file = path_file
        self.action_model = 'MAPF'
        self.all_valid = 'Yes'
        self.team_size = 0
        self.starts:List = []
        self.num_task_finished = 0
        self.sum_of_cost = 0
        self.makespan = 0
        self.actual_path:List[str]  = []
        self.planner_path:List[str] = []
        self.errors = []
        self.events = []
        self.tasks  = []


    def read_path(self, path_file) -> None:
        with open(path_file, mode='r', encoding='utf-8') as fin:
            for ag_id, line in enumerate(fin.readlines()):
                seg = line.split(' ')
                assert seg[0] == 'Agent'
                assert ag_id == int(seg[1].split(':')[0])
                path = seg[2].split('->')[:-1]
                self.makespan = max(self.makespan, len(path)-1)
                self.sum_of_cost += len(path)-1
                self.team_size += 1

                st_loc = path[0][1:-1].split(',')
                self.starts.append([int(st_loc[0]), int(st_loc[1]), 'N/A'])
                gl_loc = path[-1][1:-1].split(',')
                self.tasks.append([ag_id, int(gl_loc[0]), int(gl_loc[1])])

                agent_event = []
                agent_event.append([ag_id, 0, 'assigned'])
                agent_event.append([ag_id, len(path)-1, 'finished'])
                self.events.append(agent_event)

                motion = ''
                for t in range(0, len(path)-1):
                    loc = path[t][1:-1].split(',')
                    loc = (int(loc[0]), int(loc[1]))  # (row, col)
                    nxt = path[t+1][1:-1].split(',')
                    nxt = (int(nxt[0]), int(nxt[1]))
                    if nxt[0] == loc[0] and loc[1] == nxt[1]:  # Wait
                        motion += 'W,'
                    elif nxt[0] == loc[0] and nxt[1] == loc[1]+1:  # Right
                        motion += 'R,'
                    elif nxt[0] == loc[0] and nxt[1] == loc[1]-1:  # Left
                        motion += 'L,'
                    elif nxt[0] == loc[0]+1 and nxt[1] == loc[1]:  # Down
                        motion += 'D,'
                    elif nxt[0] == loc[0]-1 and nxt[1] == loc[1]:  # Up
                        motion += 'U,'
                self.actual_path.append(motion)

        for ag_id, p in enumerate(self.actual_path):
            assert len(p) % 2 == 0
            for _ in range(len(p)//2, self.makespan):
                self.actual_path[ag_id] += 'W,'
            self.actual_path[ag_id] = self.actual_path[ag_id][:-1]
            assert len(self.actual_path[ag_id].split(',')) == self.makespan
        self.planner_path = self.actual_path
        self.num_task_finished = self.team_size


    def read_conf(self, conf_file) -> None:
        self.all_valid = 'No'
        with open(conf_file, mode='r', encoding='utf-8') as fin:
            fin.readline()  # Ignore the title
            for line in fin.readlines():
                line = line.strip().split(',')
                ag0 = int(line[0])
                ag1 = int(line[1])
                timestep = int(line[-2])
                ctype = ''
                if line[-1] == 'V':
                    ctype = 'vertex conflict'
                elif line[-1] == 'E':
                    ctype = 'edge conflict'
                elif line[-1] == 'T':
                    ctype = 'target conflict'
                self.errors.append([ag0, ag1, timestep, ctype])


    def write_to_json(self, write_file):
        output_dic = {}
        output_dic['actionModel'] = self.action_model
        output_dic['AllValid'] = self.all_valid
        output_dic['teamSize'] = self.team_size
        output_dic['start'] = self.starts
        output_dic['numTaskFinished'] = self.num_task_finished
        output_dic['sumOfCost'] = self.sum_of_cost
        output_dic['makespan'] = self.makespan
        output_dic['actualPaths'] = self.actual_path
        output_dic['plannerPaths'] = self.planner_path
        output_dic['errors'] = self.errors
        output_dic['events'] = self.events
        output_dic['tasks'] = self.tasks
        with open(write_file, mode='w', encoding='UTF-8') as fout:
            json.dump(output_dic, fout, indent=4)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Transfer path from Jiaoyang codebase to PlanViz')
    parser.add_argument('--scen', type=str, required=True, help='Scen file')
    parser.add_argument('--path', type=str, required=True, help='Path file')
    parser.add_argument('--out',  type=str, required=True, help='Output json file')
    parser.add_argument('--conf', type=str, required=False, default="", help='Conflict file')
    args = parser.parse_args()

    path_trans = PathsTransfer(args.scen, args.path)
    path_trans.read_path(args.path)
    if len(args.conf) > 0:
        path_trans.read_conf(args.conf)
    path_trans.write_to_json(args.out)
